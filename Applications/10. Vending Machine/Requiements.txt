https://www.youtube.com/watch?v=wOXs5Z_z0Ew&list=PL6W8uoQQ2c61X_9e6Net0WdYZidm7zooW&index=20

code.vendingState.State Design Pattern is used in this.

functionality:

    - there is a tray at each level with products on it
    - product as code and price
    - insert cash/coin after pressing insert cash button
    - select product button
    - cancel button to refund
    - cash exchange tray
    - product dispense tray

    rough flow ->
        vending machine is ideal state
        lets say user wanted to buy soda(code -> 106, price->20)

        check pdf for rough flow and come back here


       States                  operations possible
       idleState               insert cash button
       takeMoneyState          insert coin button, select product button, cancel/refund button
       selectionState          write product code, cancel/refund button, return change
       dispenseState           product dispense


When there is point that for a product state only specific operations are allowed -> state design pattern
eg-> design TV -> TV states -> off, on, changeChannel, changeVolume, ..

There is a interface state having all operations as methods and each state will implement this.
code.vendingState.State which does not require few operations -> default behaviour or throw exception.

check code

