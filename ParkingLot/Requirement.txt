


    clientWithVehicle ------>     Enters and gets ticket ----------->  while exit do payment  -------> exit

As you ask questions think of what all objects are required

Objects -->
    vehicle
    ticket
    entrance and exit gate
    parking spot

how many entrances ?
    for simplicity 1 entrance and 1 exit
    scalable for multiple entrance and exit

types of spots?
    2 wheelers
    4 wheelers
    scalable for other vehicles

Hourly based charge or minute based charge?
    Mix

parking spot should be nearest



vehicle  ---> vehicle number
              vehicle type ----> enum  { 2 wheeler,  4 wheeler }


ticket ----->  id
               entry time
               parking spot
               price
               vehicle

entrance gate ------->   find parking spot
                         update parking spot
                         generate ticket

parking spot -----> number, isEmpty , vehicle, price, type
                    park vehicle
                    remove vehicle


exit gate -----> cost calculation
                 payment
                 update parking spot



finding parking spot can be optimised, return the nearest parking spot to the vehicle for parking
search optimisation


lld  --> https://www.youtube.com/watch?v=MtjZf7291zc&list=PL6W8uoQQ2c61X_9e6Net0WdYZidm7zooW&index=6






bottom up approach --> from smallest unit


            parking spot ---> id, isEmpty, vehicle, price, type type
                            park vehicle(vehicle v)
                            remove vehicle(vehicle v)

            both is-a relation with parking spot (inheritance)

              two wheeler                        four wheeler

            price --> 10 rs                 price ---> 20 rs



parkingManeger -->

           list <parkingSpot>    therefor has-a relation with parking spot





















